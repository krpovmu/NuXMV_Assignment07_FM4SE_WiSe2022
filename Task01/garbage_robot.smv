-- This is the model of a garbage robot
-- It's a garbage can that can be called
-- from different sites 2 rooms for the exercises

MODULE room
	VAR
		room_button: {on, blinking, off};
		robot_button: boolean;
	ASSIGN
		init(room_button) := off;
		init(robot_button) := FALSE;

MODULE garbage_robot(on_robot,off_robot)
	VAR
		location: {atRoom01, between1_2, atRoom02};
		moving: boolean;
		direction: {forward, backward};
	ASSIGN
		init(location) := atRoom01;
		init(moving) := FALSE;

	next(moving) :=
		case
			!(on_robot) : FALSE;
			(on_robot)&(location=between1_2)&(direction=forward) : FALSE;
			(on_robot)&(location=between1_2)&(direction=backward) : FALSE;
			(on_robot)&(location=atRoom01) : FALSE;
			(on_robot)&(location=atRoom02) : FALSE;
			TRUE : TRUE;
		esac;

	next(off_robot) :=
		case
			(moving)&(location=between1_2)&(direction=forward): on;
			(moving) : blinking;
			TRUE : off_robot;
		esac;

	next(on_robot) :=
		case
			(location=atRoom01)&(on_robot) : FALSE;
			TRUE : on_robot;
		esac;

MODULE main

VAR
	room1: room;
	robot: garbage_robot(room1.robot_button,room1.room_button);

-- =========== Requirements ===========
-- 1 NL: Is it globally TRUE when the robot button is pressed that there is a state when
-- the robot is in room number 1?
LTLSPEC G((room1.robot_button)->F(robot.location = atRoom01));

-- 2 NL: Is it globally TRUE if the robot is in the room2 the next state the robot
-- is not moving in the forward direction?
LTLSPEC G((robot.location=atRoom02)->X((!robot.moving)U(robot.direction=forward)));

-- 3 NL: Exist a TRUE state when the robot was moving while the button was blinking when the robot
-- button was OFF?
LTLSPEC F(!(room1.robot_button)->(H(robot.moving)->O(room1.room_button=blinking)));
